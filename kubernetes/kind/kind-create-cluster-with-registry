#!/usr/bin/env bash

set -o errexit

declare -r KIND_NETWORK_NAME=$1;
declare -r KIND_CLUSTER_NAME=$2;
declare -r KIND_KUBECONFIG_DIR=$3;
declare -r KIND_KUBECONFIG_FILE=$4;
declare -r KIND_NODE_IMAGE=$5;
declare -r KIND_REGISTRY_NAME=$6;
declare -r KIND_REGISTRY_PORT=$7;
declare -r KIND_KUBERNETES_ADMIN_USER=$8;

[ -n "${KIND_NETWORK_NAME}" ] || { echo "Invalid KIND_NETWORK_NAME" && exit 1; }
[ -n "${KIND_CLUSTER_NAME}" ] || { echo "Invalid KIND_CLUSTER_NAME" && exit 1; }
[ -n "${KIND_KUBECONFIG_DIR}" ] || { echo "Invalid KIND_KUBECONFIG_DIR" && exit 1; }
[ -n "${KIND_KUBECONFIG_FILE}" ] || { echo "Invalid KIND_KUBECONFIG_FILE" && exit 1; }
[ -n "${KIND_NODE_IMAGE}" ] || { echo "Invalid KIND_NODE_IMAGE" && exit 1; }
[ -n "${KIND_REGISTRY_NAME}" ] || { echo "Invalid KIND_REGISTRY_NAME" && exit 1; }
[ -n "${KIND_REGISTRY_PORT}" ] || { echo "Invalid KIND_REGISTRY_PORT" && exit 1; }
[ -n "${KIND_KUBERNETES_ADMIN_USER}" ] || { echo "Invalid KIND_KUBERNETES_ADMIN_USER" && exit 1; }

KIND_REGISTRY_RUNNING="$(docker inspect -f '{{.State.Running}}' "${KIND_REGISTRY_NAME}" 2>/dev/null || true)"

if [ "${KIND_REGISTRY_RUNNING}" != 'true' ]; then
    docker run -d --restart=always -p "${KIND_REGISTRY_PORT}:5000" --name "${KIND_REGISTRY_NAME}" registry:2
fi

mkdir -p ${KIND_KUBECONFIG_DIR}

# Create a cluster with the local registry enabled in containerd and an Ingress setup
cat <<EOF | kind create cluster --kubeconfig ${KIND_KUBECONFIG_FILE} --image="${KIND_NODE_IMAGE}" --name="${KIND_CLUSTER_NAME}" --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
containerdConfigPatches:
- |-
  [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:${KIND_REGISTRY_PORT}"]
    endpoint = ["http://${KIND_REGISTRY_NAME}:${KIND_REGISTRY_PORT}"]
nodes:
- role: control-plane
  kubeadmConfigPatches:
  - |
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        node-labels: "ingress-ready=true"
  extraPortMappings:
  - containerPort: 80
    hostPort: 80
    protocol: TCP
    listenAddress: "0.0.0.0"
  - containerPort: 443
    hostPort: 443
    protocol: TCP
    listenAddress: "0.0.0.0"
EOF

echo
echo "Configuring the kubernetes Cluster"
echo

echo "Installing the Ingress Controller"
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/kind/deploy.yaml

# connect the registry to the cluster network (the network may already be connected)
docker network connect "${KIND_NETWORK_NAME}" "${KIND_REGISTRY_NAME}" || true

export KUBECONFIG=${KIND_KUBECONFIG_FILE}

# Document the local registry
# https://github.com/kubernetes/enhancements/tree/master/keps/sig-cluster-lifecycle/generic/1755-communicating-a-local-registry
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: local-registry-hosting
  namespace: kube-public
data:
  localRegistryHosting.v1: |
    host: "localhost:${KIND_REGISTRY_PORT}"
    help: "https://kind.sigs.k8s.io/docs/user/local-registry/"
EOF

# Deploy the Dashboard UI
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.1.0/aio/deploy/recommended.yaml

# Creating a ServiceAccount user with cluster-admin RoleBinding for accessing the Dashboard
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${KIND_KUBERNETES_ADMIN_USER}
  namespace: kubernetes-dashboard

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ${KIND_KUBERNETES_ADMIN_USER}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: ${KIND_KUBERNETES_ADMIN_USER}
  namespace: kubernetes-dashboard
EOF